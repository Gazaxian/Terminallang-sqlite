#!/bin/bash

# Banco de dados SQLite
DB="$HOME/frases.db"

# Criar banco de dados e tabela se n√£o existir
if [ ! -f "$DB" ]; then
    sqlite3 "$DB" "CREATE TABLE frases (id INTEGER PRIMARY KEY AUTOINCREMENT, frase TEXT);"
fi

# Cores
BRANCO="\e[97m"
AZUL="\e[34m"
VERDE="\e[32m"
VERMELHO="\e[31m"
AMARELO="\e[33m"
LARANJA="\e[38;5;214m"  # Cor para a nova op√ß√£o
RESET="\e[0m"

# Vari√°vel para o limite de frases por p√°gina
limite=5

# Adicionar frases ao banco de dados (evitando duplicatas)
adicionar_frases() {
    echo -e "${AZUL}Digite frases de ingl√™s (inclua a pron√∫ncia entre () e a tradu√ß√£o entre [])."
    echo -e "Pressione Enter sem digitar nada para sair.${RESET}"

    while true; do
        read -p "Frase: " frase
        [[ -z "$frase" ]] && break  # Sai do loop se a entrada estiver vazia

        # Escapar as aspas simples na frase
        frase_escapada=$(echo "$frase" | sed "s/'/''/g")

        # Verifica se a frase j√° existe no banco de dados
        if sqlite3 "$DB" "SELECT COUNT(*) FROM frases WHERE frase = '$frase_escapada';" | grep -q "1"; then
            echo -e "${VERMELHO}‚ö†Ô∏è Frase j√° cadastrada!${RESET}"
        else
            sqlite3 "$DB" "INSERT INTO frases (frase) VALUES ('$frase_escapada');"
            echo -e "${VERDE}‚úÖ Frase salva!${RESET}"
        fi
    done
}

# Exibir frases salvas com pagina√ß√£o
exibir_frases() {
    # Recuperar todas as frases do banco de dados
    frases=$(sqlite3 "$DB" "SELECT frase FROM frases;")
    if [[ -z "$frases" ]]; then
        echo -e "${VERMELHO}Nenhuma frase adicionada ainda.${RESET}"
    else
        # Garantir que cada frase seja tratada como um bloco √∫nico
        mapfile -t frases_array <<< "$frases"
        total=${#frases_array[@]}
        pagina=0
        total_paginas=$(( (total + limite - 1) / limite ))

        while true; do
            clear
            inicio=$((pagina * limite))
            fim=$((inicio + limite))
            if [[ $fim -gt $total ]]; then
                fim=$total
            fi

            echo -e "üìñ ${BRANCO}Frases salvas:${RESET}\n"
            for ((i=inicio; i<fim; i++)); do
                linha="${frases_array[i]}"

                # Extra√ß√£o da frase completa, sem dividir palavras
                frase=$(echo "$linha" | sed -E 's/\(.*\)//' | sed -E 's/\[.*\]//')
                pronuncia=$(echo "$linha" | grep -oP '\(.*?\)')
                traducao=$(echo "$linha" | grep -oP '\[.*?\]')

                echo -e "${BRANCO}Frase: $frase${RESET}"
                [[ -n "$pronuncia" ]] && echo -e "${AZUL}Pron√∫ncia: $pronuncia${RESET}"
                [[ -n "$traducao" ]] && echo -e "${VERDE}Tradu√ß√£o: $traducao${RESET}"
                echo -e "----------------------------------"
            done

            echo -e "${AZUL}P√°gina $((pagina + 1))/$total_paginas${RESET}"
            echo -e "[N] Pr√≥xima p√°gina | [P] P√°gina anterior | [Q] Sair"
            read -n 1 -s resposta
            case "$resposta" in
                n|N) [[ $pagina -lt $((total_paginas - 1)) ]] && ((pagina++)) ;;
                p|P) [[ $pagina -gt 0 ]] && ((pagina--)) ;;
                q|Q) clear; break ;;
            esac
        done
    fi
}

# Pesquisar frases por palavra-chave
pesquisar_frases() {
    echo -e "${AZUL}Digite o termo de busca:${RESET}"
    read termo

    # Escapar as aspas simples no termo de busca
    termo_escapado=$(echo "$termo" | sed "s/'/''/g")

    # Pesquisar no banco de dados
    resultados=$(sqlite3 "$DB" "SELECT frase FROM frases WHERE frase LIKE '%$termo_escapado%';")

    if [[ -z "$resultados" ]]; then
        echo -e "${VERMELHO}Nenhuma frase encontrada.${RESET}"
    else
        # Dividir os resultados em um array
        mapfile -t resultados_array <<< "$resultados"

        total=${#resultados_array[@]}
        pagina=0
        total_paginas=$(( (total + limite - 1) / limite ))

        while true; do
            clear
            inicio=$((pagina * limite))
            fim=$((inicio + limite))
            if [[ $fim -gt $total ]]; then
                fim=$total
            fi

            echo -e "üîé ${BRANCO}Resultados encontrados: $total${RESET}\n"
            for ((i=inicio; i<fim; i++)); do
                linha="${resultados_array[i]}"
                frase=$(echo "$linha" | sed -E 's/\(.*\)//' | sed -E 's/\[.*\]//')
                pronuncia=$(echo "$linha" | grep -oP '\(.*?\)')
                traducao=$(echo "$linha" | grep -oP '\[.*?\]')

                echo -e "${BRANCO}Frase: $frase${RESET}"
                [[ -n "$pronuncia" ]] && echo -e "${AZUL}Pron√∫ncia: $pronuncia${RESET}"
                [[ -n "$traducao" ]] && echo -e "${VERDE}Tradu√ß√£o: $traducao${RESET}"
                echo -e "----------------------------------"
            done

            echo -e "${AZUL}P√°gina $((pagina + 1))/$total_paginas${RESET}"
            echo -e "[N] Pr√≥xima p√°gina | [P] P√°gina anterior | [Q] Sair"
            read -n 1 -s resposta
            case "$resposta" in
                n|N) [[ $pagina -lt $((total_paginas - 1)) ]] && ((pagina++)) ;;
                p|P) [[ $pagina -gt 0 ]] && ((pagina--)) ;;
                q|Q) clear; break ;;
            esac
        done
    fi
}

# Limpar terminal
limpar_terminal() {
    clear
    echo -e "${VERDE}Terminal limpo!${RESET}"
}

# Alterar limite de frases por p√°gina
alterar_limite() {
    echo -e "${LARANJA}Digite o novo limite de frases por p√°gina (n√∫mero positivo):${RESET}"
    read novo_limite
    if [[ "$novo_limite" =~ ^[0-9]+$ ]] && [ "$novo_limite" -gt 0 ]; then
        limite=$novo_limite
        echo -e "${VERDE}Limite de frases por p√°gina alterado para $limite!${RESET}"
    else
        echo -e "${VERMELHO}Valor inv√°lido! Por favor, insira um n√∫mero positivo.${RESET}"
    fi
}

# Menu principal
while true; do
    echo -e "\nüìö ${BRANCO}Terminallang - Anota√ß√µes de Frases Ilimitadas${RESET}\n"
    echo -e "${AZUL}1) ‚úèÔ∏è Adicionar frases${RESET}"
    echo -e "${VERDE}2) üìñ Ver todas as frases${RESET}"
    echo -e "${AMARELO}3) üîç Pesquisar frases${RESET}"
    echo -e "${LARANJA}4) ‚öôÔ∏è Alterar limite de frases por p√°gina${RESET}"
    echo -e "${VERMELHO}5) üßπ Limpar terminal${RESET}"
    echo -e "${BRANCO}6) ‚ùå Sair${RESET}"
    read -p "Escolha uma op√ß√£o: " opcao

    case $opcao in
        1) adicionar_frases ;;
        2) exibir_frases ;;
        3) pesquisar_frases ;;
        4) alterar_limite ;;
        5) limpar_terminal ;;
        6) echo -e "${VERMELHO}Saindo...${RESET}"; exit 0 ;;
        *) echo -e "${VERMELHO}Op√ß√£o inv√°lida!${RESET}" ;;
    esac

done
